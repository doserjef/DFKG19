
# computeDesignMatrix -----------------------------------------------------

computeDesignMatrix <- function(fileName, geoFileName, indexNames, yearsPostTrt) {
  require(dplyr)
  require(tidyr)
  
  # Logit data transformation
  logit <- function(theta, a, b) {
    log((theta-a)/(b-theta))
  }
  
  # Inverse logit transformation
  logit.inv <- function(z, a, b) {
    b-(b-a)/(1+exp(z))
  }
  
  # This function creates the design matrix for a multivariate model
  dat <- read.csv(fileName)
  rain <- read.csv(geoFileName, stringsAsFactors = FALSE)
  rain$siteInfo <- sub('.*/', '', rain$X)
  rain$year <- as.numeric(substr(rain$siteInfo, 5, 8))
  rain$day <- as.numeric(substr(rain$siteInfo, 11, 12))
  rain$time <- as.numeric(substr(rain$siteInfo, 14, 19))
  rain$X <- NULL
  rain$X.1 <- NULL
  rain$siteInfo <- NULL
  
  dat <- left_join(dat, rain, by = c("year", "day", "time"))
  
  # Transform variable to continuous
  for (i in 1:length(indexNames)) {
    if (indexNames[i] == 'ndsi') {
      dat <- dat %>% 
        mutate(ndsi = logit(ndsi, -1, 1))
    }
    if (indexNames[i] == 'H') {
      dat <- dat %>% 
        mutate(H = logit(H, 0, 1))
    } 
    if (indexNames[i] == 'aei') {
      dat <- dat %>% 
        mutate(aei = logit(aei, 0, 1))
    }
    if (indexNames[i] == 'aci') {
      dat <- dat %>% 
        mutate(aci = log(aci))
    }
  }
  
  
  long.dat <- gather(dat, key = "index", value = "value", indexNames)
  
  # Order data by each "individual" recording site/day/time combo
  ordered.long.dat <- long.dat %>% 
    arrange(recording.site, day, time, year)
  ordered.long.dat$X <- NULL
  n <- nrow(ordered.long.dat)
  
  # Create indicator variable for each "individual" soundscape
  ordered.long.dat$ind = 1
  for (i in 2:n) {
    if (sum(ordered.long.dat[i, c("month", "day", "time", "recording.site")] == 
            ordered.long.dat[i - 1, c("month", "day", "time", "recording.site")]) == 4) {
      ordered.long.dat$ind[i] = ordered.long.dat$ind[i-1]
    } else {
      ordered.long.dat$ind[i] = ordered.long.dat$ind[i-1] + 1
    }
  }
  
  
  # Construct design matrix
  n.indices <- length(indexNames)
  post.trt.years <- length(yearsPostTrt)
  X <- matrix(0, ncol = ((post.trt.years * 2) + 3) * n.indices, nrow = n)
  # X <- matrix(0, ncol = ((post.trt.years * 2) + 2) * n.indices, nrow = n)
  index.ind <- rep(1:n.indices, length.out = n)
  trt.ind <- ordered.long.dat$trt
  year <- ordered.long.dat$year
  num <- ncol(X) / n.indices
  for (i in 1:n.indices) {
    # Respective intercept for each psd value
    X[, (i-1)*num + 1] <- ifelse(index.ind == i, 1, 0)
    X[, (i-1)*num + 2] <- ifelse(index.ind == i & trt.ind == 1, 1, 0)
    X[, (i-1)*num + 3] <- ifelse(index.ind == i & year == yearsPostTrt[1], 1, 0)
    X[, (i-1)*num + 4] <- ifelse(index.ind == i & year == yearsPostTrt[2], 1, 0)
    X[, (i-1)*num + 5] <- ifelse(index.ind == i & year == yearsPostTrt[3], 1, 0)
    X[, (i-1)*num + 6] <- ifelse(index.ind == i & year == yearsPostTrt[4], 1, 0)
    X[, (i-1)*num + 7] <- ifelse(index.ind == i & year == yearsPostTrt[5], 1, 0)
    X[, (i-1)*num + 8] <- ifelse(index.ind == i & year == yearsPostTrt[1] & trt.ind == 1, 1, 0)
    X[, (i-1)*num + 9] <- ifelse(index.ind == i & year == yearsPostTrt[2] & trt.ind == 1, 1, 0)
    X[, (i-1)*num + 10] <- ifelse(index.ind == i & year == yearsPostTrt[3] & trt.ind == 1, 1, 0)
    X[, (i-1)*num + 11] <- ifelse(index.ind == i & year == yearsPostTrt[4] & trt.ind == 1, 1, 0)
    X[, (i-1)*num + 12] <- ifelse(index.ind == i & year == yearsPostTrt[5] & trt.ind == 1, 1, 0)
    X[, (i-1)*num + 13] <- ifelse(index.ind == i, ordered.long.dat$rain, 0)
  }
  
  return(list(
    X = X, dat = ordered.long.dat, n.indices = n.indices
  ))
}
