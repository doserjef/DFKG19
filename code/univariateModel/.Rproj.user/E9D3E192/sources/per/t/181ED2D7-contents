rm(list = ls())
library(coda)
library(ggplot2)
library(tidyr)
library(dplyr)
# summary.R ---------------------------------------------------------------

n.samples <- 500
theta.1 <- t(matrix(scan("theta-samples-1"), ncol = n.samples, byrow = F))
theta.2 <- t(matrix(scan("theta-samples-2"), ncol = n.samples, byrow =F))
theta.3 <- t(matrix(scan("theta-samples-3"), ncol = n.samples, byrow = F))

n.alpha <- 13
colnames(theta.1) <- c(paste0("alpha.", 0:(n.alpha-1)), "tau.sq.", "sigma.sq")
colnames(theta.2) <- colnames(theta.1)
colnames(theta.3) <- colnames(theta.2)

burn.in <- floor(0.1 * n.samples)
sub <- (burn.in+1):n.samples

m.quants.1 <- summary(window(mcmc(theta.1), start = burn.in))$quantiles
m.quants.2 <- summary(window(mcmc(theta.2), start = burn.in))$quantiles
m.quants.3 <- summary(window(mcmc(theta.3), start = burn.in))$quantiles

# Assess convergence
chains <- mcmc.list(mcmc(theta.1), mcmc(theta.2), mcmc(theta.3))
plot(chains, density = FALSE)
gelman.diag(chains)



# overlaps with zero, suggests there are no differences in b/w control and treatment. 
ctrl.alpha.post <- as.data.frame(m.quants.1[3:7, ])
row.names(ctrl.alpha.post) <- c("ctrl2014", "ctrl2015", "ctrl2016", "ctrl2017", "ctrl2018")
years <- c(2014:2018)
ctrl.alpha.post$years <- years
trt.alpha.post <- as.data.frame(m.quants.1[8:12, ])
row.names(trt.alpha.post) <- c("trt2014", "trt2015", "trt2016", "trt2017", "trt2018")
trt.alpha.post$years <- years

png("../../figures/ndsiYearEffects.png", width = 480, height = 480)
par(mar=c(5.5,5.1,4.1,2.1))
plot(years, trt.alpha.post[, 3], axes = FALSE, cex = 1.25, pch = 19, cex.lab = 1.5, cex.axis = 1.5,
     xlab = "Year", ylab = 'Year Effects', 
     ylim = c(min(trt.alpha.post[, 1]), max(trt.alpha.post[, 5])), xpd = TRUE
)
abline(h = 0, lty = 2)
segments(years, trt.alpha.post[, 1], years, trt.alpha.post[, 5], col = 'grey', lwd = 1.5)
axis(1, cex.axis = 1.25)
axis(2, at = seq(-2, .5, by = 0.5), labels = seq(-2, .5, by = 0.5), las = 1, xpd = TRUE, 
     cex.axis = 1.25)
dev.off()



vals.post.burn <- window(mcmc(theta.1), start = burn.in)

dat <- as.data.frame(vals.post.burn)

ggplot(dat, aes(alpha.1, fill = 'black')) + 
  geom_density(alpha = 0.5) + 
  geom_vline(xintercept = 0, linetype = 'dashed', col = 'black') + 
  guides(fill = FALSE) + 
  labs(x = expression(alpha[1]), y = "Density", size = 2) + 
  theme(axis.text=element_text(size=12),
        axis.title=element_text(size=14,face="bold"))

dat.long <- gather(dat, key = 'Variable', value = 'val')

dat.long.sub <- dat.long %>% 
  filter(Variable %in% c("alpha.1", "alpha.7", "alpha.8", "alpha.9", "alpha.10", 
                         "alpha.11", "alpha.12", "sigma.sq", "tau.sq."))

# See if you can do some facet plot stuff
ggplot(data = dat.long.sub, aes(x = val, fill = 'black')) + 
  geom_density(alpha = 0.5) +
  geom_vline(xintercept = 0, linetype = 'dashed', col = 'black') +
  guides(fill = FALSE) + 
  facet_wrap(Variable ~ .)


# Marginal Posterior Density Plots

require(coda)
require(ggplot2)
n.iter <- ncol(post.vals[[1]])
burn.in <- floor(0.25*n.iter)
vals <- matrix(0, nrow = length(post.vals) * (n.iter - burn.in + 1), ncol = 2)

indx <- nrow(vals) / length(post.vals)
quants <- matrix(0, length(post.vals), 2)
for (i in 1:length(post.vals)) {
  vals[(((i - 1) * indx + 1):(i * indx)), 1] <- window(mcmc(t(post.vals[[i]])), start = burn.in)[, 1]
  vals[(((i - 1) * indx + 1):(i * indx)), 2] <- models[i]
  # quants[i, ] <- summary(window(mcmc(t(post.vals[[i]])), start = burn.in))$quantiles[1, 5]
}
plot.vals <- as.data.frame(vals, stringsAsFactors = FALSE)
names(plot.vals) <- c("val", "model")
plot.vals$val <- as.numeric(plot.vals$val)
ggplot(plot.vals, aes(val, fill = model)) +
  geom_density(alpha = 0.5) +
  geom_vline(xintercept = 1, linetype = 'dashed', col = 'black')

